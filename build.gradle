plugins {
	id 'java'
	id 'idea'
	id 'org.springframework.boot' version '3.3.5'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.ivan'
version = '0.5.0'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

sourceSets {
	unit {
		java {
			srcDirs(file("src/test/unit/java"))
		}

		resources {
			srcDirs(file("src/tests/unit/resources"))
		}

		compileClasspath += main.output
		runtimeClasspath += main.output
	}

	integration {
		java {
			srcDirs(file("src/test/integration/java"))
		}

		resources {
			srcDirs(file("src/tests/integration/resources"))
		}

		compileClasspath += main.output
		runtimeClasspath += main.output
	}

	acceptance {
		java {
			srcDirs(file("src/test/acceptance/java"))
		}

		resources {
			srcDirs(file("src/tests/acceptance/resources"))
		}

		compileClasspath += main.output
		runtimeClasspath += main.output
	}

	test {
		java {
			srcDirs()
		}
	}
}

configurations {

	unitImplementation {
		extendsFrom(testImplementation)
	}

	unitRuntimeOnly {
		extendsFrom(testRuntimeOnly)
	}

	integrationImplementation {
		extendsFrom(testImplementation)
	}

	integrationRuntimeOnly {
		extendsFrom(testRuntimeOnly)
	}

	acceptanceImplementation {
		extendsFrom(testImplementation)
	}

	acceptanceRuntimeOnly {
		extendsFrom(testRuntimeOnly)
	}
}

idea {
	module {
		testSources.from(
				sourceSets.unit.java.srcDirs,
				sourceSets.integration.java.srcDirs,
				sourceSets.acceptance.java.srcDirs
		)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.register("unit", Test)
tasks.register("integration", Test)
tasks.register("acceptance", Test)
tasks.register("junitTestReport", TestReport)

unit {
	useJUnitPlatform()

	setTestClassesDirs(sourceSets.unit.output.classesDirs)
	setClasspath(sourceSets.unit.runtimeClasspath)

	reports {
		html.outputLocation.set(
				file("build/reports/junit/unit")
		)
	}

	finalizedBy(junitTestReport)
}

integration {
	useJUnitPlatform()

	setTestClassesDirs(sourceSets.integration.output.classesDirs)
	setClasspath(sourceSets.integration.runtimeClasspath)

	reports {
		html.outputLocation.set(
				file("build/reports/junit/integration")
		)
	}

	finalizedBy(junitTestReport)
	shouldRunAfter(unit)
}

acceptance {
	useJUnitPlatform()

	setTestClassesDirs(sourceSets.acceptance.output.classesDirs)
	setClasspath(sourceSets.acceptance.runtimeClasspath)

	reports {
		html.outputLocation.set(
				file("build/reports/junit/acceptance")
		)
	}

	finalizedBy(junitTestReport)
	shouldRunAfter(integration)
}

test {
	dependsOn(unit, integration, acceptance)
}

junitTestReport {
	destinationDirectory.set(
			file("build/reports/junit/test")
	)

	testResults.from(
			file("build/test-results/unit/binary"),
			file("build/test-results/integration/binary"),
			file("build/test-results/acceptance/binary")
	)

	shouldRunAfter(unit, integration, acceptance)
}

bootJar {
	archiveFileName = 'pokedex.jar'
}
